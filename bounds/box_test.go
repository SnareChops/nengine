package bounds_test

import (
	"testing"

	"github.com/SnareChops/nengine/bounds"
	"github.com/stretchr/testify/assert"
)

func TestBoxInit(t *testing.T) {
	box := bounds.NewBox(2, 4)
	assert.Equal(t, 0., box.X())
	assert.Equal(t, 0., box.Y())
	x, y := box.Offset()
	assert.Equal(t, 0., x)
	assert.Equal(t, 0., y)
	w, h := box.Size()
	assert.Equal(t, 2, w)
	assert.Equal(t, 4, h)
	assert.Equal(t, 0., box.Rotation())
	assert.Equal(t, 2, box.Dx())
	assert.Equal(t, 4, box.Dy())
	x, y = box.Min()
	assert.Equal(t, 0., x)
	assert.Equal(t, 0., y)
	x, y = box.Mid()
	assert.Equal(t, 1., x)
	assert.Equal(t, 2., y)
	assert.Equal(t, 1., box.MidX())
	assert.Equal(t, 2., box.MidY())
	x, y = box.Max()
	assert.Equal(t, 1., x)
	assert.Equal(t, 3., y)
	assert.Equal(t, 1., box.MaxX())
	assert.Equal(t, 3., box.MaxY())
}

func TestBoxPositioned(t *testing.T) {
	box := bounds.NewBox(2, 4)
	box.SetPos2(10, 20)
	assert.Equal(t, 10., box.X())
	assert.Equal(t, 20., box.Y())
	w, h := box.Size()
	assert.Equal(t, 2, w)
	assert.Equal(t, 4, h)
	assert.Equal(t, 0., box.Rotation())
	assert.Equal(t, 2, box.Dx())
	assert.Equal(t, 4, box.Dy())
	x, y := box.Min()
	assert.Equal(t, 10., x)
	assert.Equal(t, 20., y)
	x, y = box.Mid()
	assert.Equal(t, 11., x)
	assert.Equal(t, 22., y)
	assert.Equal(t, 11., box.MidX())
	assert.Equal(t, 22., box.MidY())
	x, y = box.Max()
	assert.Equal(t, 11., x)
	assert.Equal(t, 23., y)
	assert.Equal(t, 11., box.MaxX())
	assert.Equal(t, 23., box.MaxY())
}

func TestBoxOffset(t *testing.T) {
	box := bounds.NewBox(2, 4)
	box.SetPos2(10, 20)
	box.SetAnchor(bounds.CENTER, bounds.CENTER)
	assert.Equal(t, 10., box.X())
	assert.Equal(t, 20., box.Y())
	w, h := box.Size()
	assert.Equal(t, 2, w)
	assert.Equal(t, 4, h)
	assert.Equal(t, 0., box.Rotation())
	assert.Equal(t, 2, box.Dx())
	assert.Equal(t, 4, box.Dy())
	x, y := box.Min()
	assert.Equal(t, 9., x)
	assert.Equal(t, 18., y)
	x, y = box.Mid()
	assert.Equal(t, 10., x)
	assert.Equal(t, 20., y)
	assert.Equal(t, 10., box.MidX())
	assert.Equal(t, 20., box.MidY())
	x, y = box.Max()
	assert.Equal(t, 10., x)
	assert.Equal(t, 21., y)
	assert.Equal(t, 10., box.MaxX())
	assert.Equal(t, 21., box.MaxY())
}
